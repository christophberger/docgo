// Code generated by go-bindata.
// sources:
// resources/goweave.css
// resources/goweave.templ
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesGoweaveCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x55\x4d\x6f\xdb\x3c\x0c\x3e\xdb\xbf\x82\x68\xf1\xa2\x1f\x88\xd3\x7c\xb5\x28\x92\xcb\x3b\xec\xb2\x43\xbb\xe3\xee\xb2\xc5\xc4\x42\x65\xd1\x90\xd5\xb8\xd9\xd0\xff\x3e\xda\x96\x93\xf8\xa3\xdb\xb0\xc5\x90\x63\x53\x8f\xc8\x47\x0f\x29\x3a\x26\x79\x80\x1f\x21\xf0\x2f\x16\xc9\xcb\xce\xd2\xab\x91\x6b\xb8\xdc\xce\xaa\x6b\x53\x4f\x64\xc2\xee\x94\x59\xc3\x0c\xb3\xc6\x90\x0b\x29\x95\xd9\x9d\x59\xb6\x64\x5c\xb4\x15\x99\xd2\x87\x35\x5c\x3d\x09\x47\x57\x13\xb8\xfa\x82\x7a\x8f\x4e\x25\x82\x5f\x0a\x61\x8a\xa8\x40\xab\xb6\x9b\x30\xa8\xe1\x85\xfa\x8e\x6b\x98\x57\x2e\x02\xad\x0c\x46\x29\xaa\x5d\xea\xd8\x34\x5d\x56\xc6\xf7\x30\xbc\xdc\x51\x89\x62\x8f\x20\xd5\x7e\xea\x44\xac\x91\xb9\x06\x52\x15\xb9\x16\x1c\xa8\xb6\xf0\xea\x98\xac\x44\x1b\x25\xa4\xb5\xc8\x0b\x76\xda\x3e\x8d\x38\xb1\x43\x0f\x91\xa5\x72\x04\x29\x47\x90\x09\x6a\xdd\x85\xe6\x5e\xbd\x46\xa4\xc8\x51\x7e\x26\x8b\x37\xda\x66\x5f\x7d\x73\x4c\xce\x51\xc6\xf6\xe9\x63\x6f\x46\xe3\xb6\xc5\xf7\x68\xf9\x68\x47\x5a\xca\x54\xd2\x75\x61\xd3\x17\x3c\x94\x2c\x89\xc7\xb2\x18\x64\xab\x94\x2e\xc4\x7c\x15\xf7\xa0\x5a\x39\xb4\x42\xf7\xa0\x8f\x49\x8c\x0f\xab\x1e\x54\x49\x34\xae\x0b\x2c\x53\x5e\xde\x83\x51\xce\x0e\x1d\xd5\x3a\xff\x02\x96\x50\x96\x0d\xfc\x8d\x06\x4e\xe7\x13\x48\x17\x3c\x96\x3c\x56\x3c\xee\x2b\xd7\xdd\x8a\xfb\xb4\xe7\xca\x12\xf0\xa4\x62\x8b\x55\xe5\xfd\xb6\x02\xbb\x05\xd7\xca\xef\xf0\xcd\x45\x42\xab\x1d\x57\x7b\x95\x83\xcd\xbf\xa6\x76\x3e\x7d\xf8\xb3\xd4\xa6\xf3\x91\x3a\xf2\xab\x3b\xba\x49\x4a\x3c\x92\xb7\x5c\xed\x4c\xb7\x84\x79\xc9\xa6\x23\xe6\x6a\x56\x5d\xbd\xe3\x36\x9b\xfd\xe7\xf9\x70\x94\x52\x49\x97\xae\x61\x71\x46\xff\xad\x35\x2e\x6b\x63\xd0\xbc\x89\x57\x47\x9d\xb3\xef\x09\xf6\x3a\x42\x2b\xc7\xc0\xde\xec\x7a\xd1\x9a\x89\xb9\x6f\x35\x95\xd1\xdb\x1a\x52\x25\xb9\xb0\x06\xd5\x21\xf1\x98\xe5\x86\xf9\x63\x45\xbc\x43\x27\xf8\x20\x07\x1f\x04\x1d\xe3\x18\x9c\x33\x39\x6d\x72\x54\xda\xe0\xd4\x20\xa3\x56\xe2\xe5\xac\xba\xc6\xc8\xe7\x16\xa1\x7e\xf0\xd9\xea\xd4\xeb\x33\x1a\x4d\x13\x78\x26\x23\x12\xfe\xff\x4c\xa6\x20\x2d\x8a\x09\x5c\x3c\xbd\x26\x4a\x0a\x6f\xc1\x8b\x09\x64\x64\xa8\xc8\x45\x82\x9d\xdc\xda\x5d\x7c\x3d\x5f\xcc\x26\xd0\xde\x6e\x6a\x0e\x77\xb7\xf0\x55\x58\x6e\x67\xb0\x57\x58\xe6\x64\x5d\x01\xb7\x77\xe1\xff\x19\x4a\x3e\x1d\x21\x19\x7d\x80\x22\xb1\x88\x06\x84\x91\x70\x7d\x96\xee\x07\x96\xef\x86\xb9\x86\xc1\x58\xd3\x85\x30\x38\xb5\xc2\x58\x53\xf2\xc2\x7a\x00\xf8\x74\x34\x55\x55\x61\x8e\x9f\x0a\x9e\xf6\x6d\x79\x0d\x86\xaa\x0e\x15\xbc\x0f\x7c\xdb\x09\x0c\x5a\xee\x48\x24\xe8\xad\xf5\x67\x80\xa3\x9d\x4a\xb8\x29\xd6\x61\x08\x59\x67\x63\x8a\x59\xee\x0e\x3d\xe7\x47\x5a\x8d\x70\xdf\xd0\x1e\xc0\xfc\xa5\x7a\xab\xfb\x71\xf5\xea\x2e\x18\x74\xbf\x97\x1c\x11\x06\x34\x7b\xb8\x29\xfb\x83\xe3\xcd\xb3\xfc\x19\x00\x00\xff\xff\xa3\xc4\xf5\x17\xac\x07\x00\x00")

func resourcesGoweaveCssBytes() ([]byte, error) {
	return bindataRead(
		_resourcesGoweaveCss,
		"resources/goweave.css",
	)
}

func resourcesGoweaveCss() (*asset, error) {
	bytes, err := resourcesGoweaveCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/goweave.css", size: 1964, mode: os.FileMode(420), modTime: time.Unix(1457951601, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesGoweaveTempl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\x31\x6f\xfa\x30\x10\xc5\x67\xf8\x14\xfe\x7b\xfe\x13\xb7\x5b\x07\x3b\x0b\xb4\x6b\x91\xda\xa5\xa3\xb1\x0f\x72\xc2\xb1\x91\x7d\x04\xa1\x28\xdf\xbd\x4e\x4c\x50\x51\xa5\x4e\x97\x7b\xef\xdd\x2f\x97\x53\xe4\xbf\xcd\xfb\xfa\xf3\x6b\xfb\xca\x1a\x6a\x5d\xbd\x94\x73\x01\x6d\x73\x21\x24\x07\x75\xdf\x57\x6f\xe8\xc0\xeb\x16\x86\x41\x8a\x22\x2e\x65\x0b\xa4\x99\x69\x74\x4c\x40\x8a\x9f\x69\xbf\x7a\xe1\x62\xd6\xc7\xb0\xe2\x1d\xc2\xe5\x14\x22\x71\x66\x82\x27\xf0\x39\x77\x41\x4b\x8d\xb2\xd0\xa1\x81\xd5\xd4\xfc\x67\xe8\x91\x50\xbb\x55\x32\xda\x81\x7a\xae\x9e\x78\xc6\x38\xf4\x47\x16\xc1\x29\x9e\xe8\xea\x20\x35\x00\x99\xd3\x44\xd8\xab\xbc\xd0\x3a\xa5\xad\xa6\x66\x18\x72\x52\xdc\xb6\xdd\x05\x7b\xcd\xc5\x62\xc7\xd0\x2a\x7e\x08\x17\xd0\x1d\x64\xd6\xe2\xae\xed\xb4\x39\x1e\x62\x38\x7b\xcb\x6b\x29\xb2\x3a\x9b\xc6\xe9\x94\x14\x27\xbd\x73\xd3\xc4\xa2\xef\xa3\xf6\x07\x60\xd5\x07\x18\xc2\xe0\xd3\x30\x64\xf5\x21\x1b\x59\x2a\xde\x34\xf0\xe8\x59\x66\x83\xe1\xe3\xe9\x36\xc1\x8c\x57\x2b\xef\x1a\xb9\xb8\x67\xd5\x3a\x58\x98\x80\xbf\xc6\x4c\x76\xf2\x6e\xa7\x08\xb5\x1c\x9f\x47\x44\x49\x4b\x31\xf5\x52\x4c\xde\x0f\x20\xb8\xf4\x07\x8c\x41\x7b\xa2\x2b\x7f\x9c\xf0\xb6\x7c\xce\xac\xdd\xa5\x9b\x72\x2f\xb7\x9b\x8a\xf2\x5f\x7c\x07\x00\x00\xff\xff\xe2\x45\xe1\x4f\x2f\x02\x00\x00")

func resourcesGoweaveTemplBytes() ([]byte, error) {
	return bindataRead(
		_resourcesGoweaveTempl,
		"resources/goweave.templ",
	)
}

func resourcesGoweaveTempl() (*asset, error) {
	bytes, err := resourcesGoweaveTemplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/goweave.templ", size: 559, mode: os.FileMode(420), modTime: time.Unix(1457951559, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/goweave.css": resourcesGoweaveCss,
	"resources/goweave.templ": resourcesGoweaveTempl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"goweave.css": &bintree{resourcesGoweaveCss, map[string]*bintree{}},
		"goweave.templ": &bintree{resourcesGoweaveTempl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

